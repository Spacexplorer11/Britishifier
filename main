//This bot is based off of code found in https://discord.com/channels/603970300668805120/1120579566549860433
//This bot was further developed by spacexplorer11, his ID is: 1168126408808202273 

import { Client, GatewayIntentBits, Collection } from 'discord.js';

const { Collection, Client, GatewayIntentBits } = require('discord.js');
const { token } = require('/workspaces/Britishifier/Config.json');
const fs = require('node:fs');
const path = require('node:path');
const deployCommands = require('/workspaces/Britishifier/Deploy-commands.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client.commands = new Collection();
const foldersPath = path.join(__dirname, 'Commands');
const commandFolders = fs.readdirSync(foldersPath);

for (const folder of commandFolders) {
  const commandsPath = path.join(foldersPath, folder);
  if (fs.statSync(commandsPath).isDirectory()) {
    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
    for (const file of commandFiles) {
      const filePath = path.join(commandsPath, file);
      const command = require(filePath);
      if ('data' in command && 'execute' in command) {
        client.commands.set(command.data.name, command);
      } else {
        console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
      }
    }
  }
}

const eventsPath = path.join(__dirname, 'Events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
  const filePath = path.join(eventsPath, file);
  const event = require(filePath);
  if (event.once) {
    client.once(event.name, (...args) => event.execute(...args));
  } else {
    client.on(event.name, (...args) => event.execute(...args));
  }
}

let webhook;

client.on('ready', async () => {
  const channel = client.channels.cache.get('YOUR_CHANNEL_ID'); // Replace with your channel ID
  if (channel) {
    webhook = await channel.createWebhook({
      name: message.author.username,
      avatar: message.author.avatarURL, // Replace with your desired avatar URL
    });
    console.log(`Created webhook ${webhook}`);
  }
});

for (const folder of commandFolders) {
	const commandsPath = path.join(foldersPath, folder);
    // Check if it's a directory before reading its contents
    if (fs.statSync(commandsPath).isDirectory()) {
      const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
	for (const file of commandFiles) {
		const filePath = path.join(commandsPath, file);
		const command = require(filePath);
		if ('data' in command && 'execute' in command) {
			client.commands.set(command.data.name, command);
		} else {
			console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
		}
  }
 }
}

for (const file of eventFiles) {
	const filePath = path.join(eventsPath, file);
	const event = require(filePath);
	if (event.once) {
		client.once(event.name, (...args) => event.execute(...args));
	} else {
		client.on(event.name, (...args) => event.execute(...args));
	}
}
deployCommands('/workspaces/Britishifier/Commands/Utility');
function brits(str) {
  const link = /http:\/\//gi;
  const isItALink = link.test(str);
  // Ignore links
  if (isItALink) {
    return str;
  }

  // If someone wants to kill you or someone else, tell them to not
  str = str.replace(/\bkys\b/gi, "**no, you**");
  str = str.replace(/keep yourself safe/gi, "**no, you**");
  str = str.replace(/kill yourself bot/gi, "**no, you**");
  str = str.replace(/kill yourself/gi, "**no, you**");

  // Replace variations of "isn't it" with "innit"
  str = str.replace(/ain't it/gi, '**innit**');
  str = str.replace(/isn't it/gi, '**innit**');
  str = str.replace(/aint it/gi, '**innit**');
  str = str.replace(/isnt it/gi, '**innit**');

  // Check if "nonsense" already has "bloody" in front
  const regexNonsense = /bloody\s+nonsense/gi;
  const hasBloodyNonsense = regexNonsense.test(str);

  // Add "bloody" in front of "nonsense" if not present
  if (!hasBloodyNonsense) {
    str = str.replace(/nonsense/gi, '**bloody nonsense**');
  }

  // Check if "hell" already has "bloody" in front
  const regexHell = /bloody\s+hell/gi;
  const hasBloodyHell = regexHell.test(str);

  // Add "bloody" in front of "hell" if not present
  if (!hasBloodyHell) {
    str = str.replace(/\bhell\b/gi, '**bloody hell**');
  }

  // Check if "piss" already has "bloody" in front
  const regexPiss = /bloody\s+piss/gi;
  const hasBloodyPiss = regexPiss.test(str);

  // Add "bloody" in front of "piss" if not present
  if (!hasBloodyPiss) {
    str = str.replace(/\bpiss\b/gi, '**bloody piss**');
  }

  // Turn "british" into "bri'ish"
  str = str.replace(/ritish/gi, "**ri'ish**");

  // Turn "coffee" into "tea" (who the heck drinks coffee in Britain?)
  str = str.replace(/coffee/gi, "**tea**");

  // Turn "soccer" into "football" because soccer is a disgrace in Britain
  str = str.replace(/soccer/gi,"**football**");

  // You know the typical British gabber
  str = str.replace(/what/gi, "**wot**");
  str = str.replace(/\bman\b/gi, "**mate**");
  str = str.replace(/bro/gi, "**bruv**");
  str = str.replace(/bruh/gi, "**bruv**");
  str = str.replace(/\bmom\b/gi, "**mum**");
  str = str.replace(/\bmommy\b/gi, "**mummy**");
  str = str.replace(/shit/gi, "**shite**");
  str = str.replace(/<@1193167930855260221>/gi, "Did you @mention me?");
  str = str.replace(/\bhi\b/gi, "**oy, mate**");
  str = str.replace(/\bhello\b/gi, "**oy, mate**");
  str = str.replace(/stupid/gi, "**the definition of stupidity is Ishaan**");
  str = str.replace(/\bur\b/gi, "**yer**");
  str = str.replace(/your/gi, "**yer**");
  str = str.replace(/\byou\b/gi, "**ya**");
  str = str.replace(/absolute braindead/gi, "**The definition of absolute braindead is Ishaan**");
  str = str.replace(/troll/gi, "**GET RICKROLLED, LOSER**");
  str = str.replace(/bot is bad/gi, "**No, this is an awesome bot and you have to change your trash opinion, also, \n GET RICKROLLED, LOSER!!!**");
  str = str.replace(/t/gi, "\'");

  return str;
}

client.on('messageCreate', async (message) => {
  // Ignore messages from the bot itself
  if (message.author.bot) {
    return;
  }

  console.log(`Received message: ${message.content}`);

  // Apply the British English transformations to the message content
  const transformedContent = brits(message.content);
  if (transformedContent.trim() !== "") {
    try {
      if (message.content.toLowerCase().includes("burger") || message.content.toLowerCase().includes("cheeseburger")) {
        await webhook.send({
          content: "https://youtube.com/shorts/qfYHiDyxm1I?si=DzjE1LNg_LNFqQju",
          username: message.author.username,
          avatarURL: message.author.displayAvatarURL({ dynamic: true }),
        });
        console.log("Sent the funny video in response to \"burger\" or \"cheeseburger\"");
      } else if (transformedContent.includes('Ishaan')) {
        await webhook.send({
          content: transformedContent,
          username: message.author.username,
          avatarURL: message.author.displayAvatarURL({ dynamic: true }),
        });
        await webhook.send({
          content: 'https://tenor.com/JJSB.gif',
          username: message.author.username,
          avatarURL: message.author.displayAvatarURL({ dynamic: true }),
        });
        console.log(`Sent video in response to: ${message.content}`);
      } else if (transformedContent.includes('RICKROLLED')) {
        await webhook.send({
          content: transformedContent,
          username: message.author.username,
          avatarURL: message.author.displayAvatarURL({ dynamic: true }),
        });
        await webhook.send({
          content: 'https://tenor.com/oGiMOgYKbHS.gif\nhttps://www.youtube.com/watch?v=dQw4w9WgXcQ',
          username: message.author.username,
          avatarURL: message.author.displayAvatarURL({ dynamic: true }),
        });
      } else if (message.content !== transformedContent) {
        await message.delete()
        await webhook.send({
          content: transformedContent,
          username: message.author.username,
          avatarURL: message.author.displayAvatarURL({ dynamic: true }),
        });
        console.log(`Transformed message: ${transformedContent}`);
      }
    } catch (error) {
      console.error('Error sending message:', error);
    }
  }
});

client.login(token);